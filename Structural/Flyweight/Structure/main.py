"""
Demo c∆° b·∫£n c·ªßa Flyweight Pattern

V√≠ d·ª• n√†y minh h·ªça c√°ch Flyweight Pattern gi√∫p ti·∫øt ki·ªám b·ªô nh·ªõ
b·∫±ng c√°ch chia s·∫ª c√°c object c√≥ intrinsic state gi·ªëng nhau.
"""

from flyweight import FlyweightFactory, Context


def demo_basic_flyweight():
    """
    Demo c∆° b·∫£n v·ªÅ Flyweight Pattern.
    T·∫°o nhi·ªÅu context v·ªõi c√πng shared state ƒë·ªÉ th·ªÉ hi·ªán vi·ªác chia s·∫ª flyweight.
    """
    print("=== Demo Flyweight Pattern ===\n")
    
    # T·∫°o factory v·ªõi m·ªôt s·ªë flyweight ban ƒë·∫ßu
    factory = FlyweightFactory(["Type A", "Type B"])
    factory.list_flyweights()
    print()
    
    # T·∫°o c√°c context v·ªõi extrinsic state kh√°c nhau
    contexts = []
    
    # Context 1: Type A v·ªõi extrinsic state ri√™ng
    flyweight1 = factory.get_flyweight("Type A")
    context1 = Context(flyweight1, {"position": (10, 20), "color": "red"})
    contexts.append(context1)
    
    # Context 2: Type A v·ªõi extrinsic state kh√°c
    flyweight2 = factory.get_flyweight("Type A")  # S·∫Ω s·ª≠ d·ª•ng l·∫°i flyweight
    context2 = Context(flyweight2, {"position": (30, 40), "color": "blue"})
    contexts.append(context2)
    
    # Context 3: Type B
    flyweight3 = factory.get_flyweight("Type B")
    context3 = Context(flyweight3, {"position": (50, 60), "color": "green"})
    contexts.append(context3)
    
    # Context 4: Type C (m·ªõi)
    flyweight4 = factory.get_flyweight("Type C")  # S·∫Ω t·∫°o m·ªõi
    context4 = Context(flyweight4, {"position": (70, 80), "color": "yellow"})
    contexts.append(context4)
    
    print(f"\nS·ªë flyweight objects: {len(factory._flyweights)}")
    print(f"S·ªë context objects: {len(contexts)}")
    print("=> Ti·∫øt ki·ªám b·ªô nh·ªõ: 4 contexts ch·ªâ s·ª≠ d·ª•ng 3 flyweight objects\n")
    
    # Th·ª±c hi·ªán operations
    print("=== Th·ª±c hi·ªán operations ===")
    for i, context in enumerate(contexts, 1):
        print(f"Context {i}:")
        context.operation()
        print()
    
    # Hi·ªÉn th·ªã danh s√°ch flyweight cu·ªëi c√πng
    print("=== Flyweight objects cu·ªëi c√πng ===")
    factory.list_flyweights()


def demo_memory_comparison():
    """
    Demo so s√°nh vi·ªác s·ª≠ d·ª•ng b·ªô nh·ªõ v·ªõi v√† kh√¥ng c√≥ Flyweight Pattern.
    """
    print("\n" + "="*50)
    print("=== So s√°nh s·ª≠ d·ª•ng b·ªô nh·ªõ ===")
    print("="*50)
    
    # Scenario: 1000 objects v·ªõi 10 shared types
    num_objects = 1000
    shared_types = [f"Type_{i}" for i in range(10)]
    
    print(f"Scenario: {num_objects} objects v·ªõi {len(shared_types)} shared types")
    print()
    
    # V·ªõi Flyweight Pattern
    factory = FlyweightFactory()
    contexts = []
    
    for i in range(num_objects):
        shared_type = shared_types[i % len(shared_types)]
        flyweight = factory.get_flyweight(shared_type)
        extrinsic_state = {"id": i, "position": (i*10, i*20)}
        context = Context(flyweight, extrinsic_state)
        contexts.append(context)
    
    print(f"‚úÖ V·ªõi Flyweight Pattern:")
    print(f"   - S·ªë flyweight objects: {len(factory._flyweights)}")
    print(f"   - S·ªë context objects: {len(contexts)}")
    print(f"   - T·ªïng objects: {len(factory._flyweights) + len(contexts)}")
    
    print(f"\n‚ùå Kh√¥ng c√≥ Flyweight Pattern:")
    print(f"   - S·ªë objects c·∫ßn t·∫°o: {num_objects}")
    print(f"   - M·ªói object ch·ª©a c·∫£ intrinsic v√† extrinsic state")
    
    print(f"\nüí° Ti·∫øt ki·ªám: {num_objects - len(factory._flyweights)} objects!")
    print(f"   Gi·∫£m {((num_objects - len(factory._flyweights)) / num_objects * 100):.1f}% s·ªë object c·∫ßn t·∫°o")


if __name__ == "__main__":
    demo_basic_flyweight()
    demo_memory_comparison()
