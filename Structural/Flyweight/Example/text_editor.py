"""
Text Editor - Context class cho Flyweight Pattern

Text Editor qu·∫£n l√Ω vƒÉn b·∫£n v√† formatting, s·ª≠ d·ª•ng Character Flyweights
ƒë·ªÉ ti·∫øt ki·ªám b·ªô nh·ªõ khi c√≥ nhi·ªÅu k√Ω t·ª± tr√πng l·∫∑p.
"""

from typing import List, Tuple
from character_flyweight import CharacterFactory, CharacterFlyweight


class CharacterContext:
    """
    Context cho m·ªói k√Ω t·ª± trong vƒÉn b·∫£n.
    Ch·ª©a extrinsic state: v·ªã tr√≠, font size, m√†u s·∫Øc.
    """
    
    def __init__(self, character: str, position: Tuple[int, int], 
                 font_size: int = 12, color: str = "black"):
        """
        Kh·ªüi t·∫°o character context.
        
        Args:
            character: K√Ω t·ª± (s·∫Ω l·∫•y flyweight t·ª´ factory)
            position: V·ªã tr√≠ (x, y) trong vƒÉn b·∫£n
            font_size: K√≠ch th∆∞·ªõc font
            color: M√†u s·∫Øc
        """
        self._flyweight = CharacterFactory.get_character(character)
        self._position = position      # Extrinsic state
        self._font_size = font_size    # Extrinsic state
        self._color = color           # Extrinsic state
    
    def render(self) -> None:
        """
        Render k√Ω t·ª± b·∫±ng c√°ch delegate cho flyweight v·ªõi extrinsic state.
        """
        self._flyweight.render(self._position, self._font_size, self._color)
    
    def get_character(self) -> str:
        """
        Tr·∫£ v·ªÅ k√Ω t·ª±.
        
        Returns:
            K√Ω t·ª± string
        """
        return self._flyweight.get_character()
    
    def update_position(self, position: Tuple[int, int]) -> None:
        """
        C·∫≠p nh·∫≠t v·ªã tr√≠ c·ªßa k√Ω t·ª±.
        
        Args:
            position: V·ªã tr√≠ m·ªõi (x, y)
        """
        self._position = position
    
    def update_formatting(self, font_size: int = None, color: str = None) -> None:
        """
        C·∫≠p nh·∫≠t formatting c·ªßa k√Ω t·ª±.
        
        Args:
            font_size: K√≠ch th∆∞·ªõc font m·ªõi (optional)
            color: M√†u s·∫Øc m·ªõi (optional)
        """
        if font_size is not None:
            self._font_size = font_size
        if color is not None:
            self._color = color


class TextEditor:
    """
    Text Editor ch√≠nh - qu·∫£n l√Ω to√†n b·ªô vƒÉn b·∫£n.
    S·ª≠ d·ª•ng Character Flyweights ƒë·ªÉ optimize memory usage.
    """
    
    def __init__(self):
        """
        Kh·ªüi t·∫°o text editor r·ªóng.
        """
        self._characters: List[CharacterContext] = []
        self._cursor_position = (0, 0)
    
    def type_text(self, text: str, font_size: int = 12, color: str = "black") -> None:
        """
        Nh·∫≠p vƒÉn b·∫£n v√†o editor.
        
        Args:
            text: VƒÉn b·∫£n c·∫ßn nh·∫≠p
            font_size: K√≠ch th∆∞·ªõc font
            color: M√†u s·∫Øc
        """
        x, y = self._cursor_position
        
        for char in text:
            if char == '\n':
                # Newline: di chuy·ªÉn cursor xu·ªëng d√≤ng m·ªõi
                x = 0
                y += 20  # Gi·∫£ s·ª≠ line height = 20
            else:
                # T·∫°o character context m·ªõi
                position = (x, y)
                char_context = CharacterContext(char, position, font_size, color)
                self._characters.append(char_context)
                
                # Di chuy·ªÉn cursor
                x += 10  # Gi·∫£ s·ª≠ character width = 10
        
        self._cursor_position = (x, y)
    
    def render_document(self) -> None:
        """
        Render to√†n b·ªô vƒÉn b·∫£n.
        """
        print("üìÑ Rendering document:")
        print("-" * 50)
        for char_context in self._characters:
            char_context.render()
        print("-" * 50)
    
    def get_text(self) -> str:
        """
        Tr·∫£ v·ªÅ vƒÉn b·∫£n hi·ªán t·∫°i d∆∞·ªõi d·∫°ng string.
        
        Returns:
            VƒÉn b·∫£n string
        """
        return ''.join(char_context.get_character() for char_context in self._characters)
    
    def format_range(self, start: int, end: int, font_size: int = None, color: str = None) -> None:
        """
        Format m·ªôt ƒëo·∫°n vƒÉn b·∫£n.
        
        Args:
            start: V·ªã tr√≠ b·∫Øt ƒë·∫ßu
            end: V·ªã tr√≠ k·∫øt th√∫c
            font_size: K√≠ch th∆∞·ªõc font m·ªõi
            color: M√†u s·∫Øc m·ªõi
        """
        if start < 0 or end > len(self._characters) or start >= end:
            print("‚ùå Invalid range!")
            return
        
        print(f"üé® Formatting characters {start}-{end}...")
        for i in range(start, end):
            self._characters[i].update_formatting(font_size, color)
    
    def get_statistics(self) -> dict:
        """
        Tr·∫£ v·ªÅ th·ªëng k√™ v·ªÅ vƒÉn b·∫£n v√† flyweight usage.
        
        Returns:
            Dictionary ch·ª©a th·ªëng k√™
        """
        total_chars = len(self._characters)
        unique_chars = CharacterFactory.get_created_characters_count()
        
        # ƒê·∫øm frequency c·ªßa t·ª´ng k√Ω t·ª±
        char_frequency = {}
        for char_context in self._characters:
            char = char_context.get_character()
            char_frequency[char] = char_frequency.get(char, 0) + 1
        
        return {
            'total_characters': total_chars,
            'unique_characters': unique_chars,
            'flyweight_objects': unique_chars,
            'context_objects': total_chars,
            'memory_saved_percentage': ((total_chars - unique_chars) / total_chars * 100) if total_chars > 0 else 0,
            'character_frequency': char_frequency
        }
    
    def print_statistics(self) -> None:
        """
        In th·ªëng k√™ v·ªÅ vƒÉn b·∫£n v√† hi·ªáu qu·∫£ c·ªßa Flyweight Pattern.
        """
        stats = self.get_statistics()
        
        print("\nüìä Text Editor Statistics:")
        print("=" * 40)
        print(f"üìù Total characters: {stats['total_characters']}")
        print(f"üî§ Unique characters: {stats['unique_characters']}")
        print(f"üè≠ Flyweight objects: {stats['flyweight_objects']}")
        print(f"üìã Context objects: {stats['context_objects']}")
        print(f"üíæ Memory saved: {stats['memory_saved_percentage']:.1f}%")
        print(f"üîç Memory usage: {CharacterFactory.get_memory_usage()}")
        
        print(f"\nüìà Character frequency:")
        for char, freq in sorted(stats['character_frequency'].items()):
            if char == ' ':
                print(f"   '[space]': {freq}")
            elif char == '\n':
                print(f"   '[newline]': {freq}")
            else:
                print(f"   '{char}': {freq}")
    
    def clear(self) -> None:
        """
        X√≥a to√†n b·ªô vƒÉn b·∫£n.
        """
        self._characters.clear()
        self._cursor_position = (0, 0)
        print("üóëÔ∏è Document cleared!")
    
    def __len__(self) -> int:
        """
        Tr·∫£ v·ªÅ s·ªë k√Ω t·ª± trong vƒÉn b·∫£n.
        
        Returns:
            S·ªë k√Ω t·ª±
        """
        return len(self._characters)
